if not game.ReplicatedStorage:FindFirstChild("GameData") or not game.ReplicatedStorage:FindFirstChild("EntityInfo") then return end
local actualName = "Fire~Doors"
local version = "2.1.2"
local fullName = actualName.." ["..version.."]"
_G.fullName = fullName
_G.actualName = actualName
local logoImage = "http://www.roblox.com/asset/?id=876744268"
_G.logoImage = logoImage
local ppNames = {
	["ModulePrompt"] = true,
	["ActivateEventPrompt"] = true,
	["LootPrompt"] = true,
	["SkipPrompt"] = true,
	["HerbPrompt"] = true,
	["AwesomePrompt"] = true,
	["UnlockPrompt"] = true,
}
local whitelist = loadstring(game:HttpGet("https://raw.githubusercontent.com/InfernusScriptz/Fire-Doors/main/Whitelist.lua"))()
local pagelist,close,mainFrame,screenGui,logo,title = loadstring(game:HttpGet("https://raw.githubusercontent.com/InfernusScriptz/FireHub/main/hub.lua"))()
local pageList = pagelist
local connectedFunctions = {}
local bools = {
	["nill"] = true,
	["DoorESP"] = false,
	["EntityESP"] = false,
	["PlayerESP"] = false,
	["AutoInteract"] = false,
	["Noclipping"] = false,
	["EnableAllInteractables"] = false,
	["NotifyEntities"] = false,
	["PlayerUntouchable"] = false,
	["God"] = false,
	["ItemESP"] = false,
	["InstantInteract"] = false,
	["NoSeek"] = false,
	["FullBright"] = false,
	["EnableJumping"] = false,
	["SpamOthersTools"] = false,
	["FlingOnDeath"] = false,
	["NotifyEntetiesForOthers"] = false,
	["FarDoors"] = false,
	["FlexAchievements"] = false,
	["AutoLibraryCode"] = false,
	["SpamWalkSound"] = false,
	["AutoFixElevator"] = false,
	["ShowBackpacks"] = false,
	["NotifyWhenPlayerEntersOrLeaves"]
}
local closed = false
local Font = Enum.Font.Oswald
local plr = game.Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local gui = game.CoreGui
local bp = plr.Backpack or plr:WaitForChild("Backpack")
local hrp = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Collision") or char:FindFirstChildOfClass("BasePart")
local hum = char:WaitForChild("Humanoid")
local event = Instance.new("BindableEvent",screenGui)
workspace.FilteringEnabled = true
local fireproximityprompt = fireproximityprompt or function(Obj, Amount, Skip)
	local Skip = Skip or false
	if Obj and Obj.Parent and Obj:IsA("ProximityPrompt") then 
		local Amount = Amount or 1
		local ex = Obj.Exclusivity
		Obj.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
		if Amount == 0 or Amount <= 0 then
			Amount = 1
		end
		local PromptTime = Obj.HoldDuration
		if Skip == true then 
			Obj.HoldDuration = 0
		end
		for i = 1, Amount do 
			Obj:InputHoldBegin()
			if not Skip then 
				task.wait(Obj.HoldDuration)
			end
			Obj:InputHoldEnd()
		end
		Obj.Exclusivity = ex
		Obj.HoldDuration = PromptTime
	end
end
function WaitForChildOfClass(where,className)
	if where and where:FindFirstChildOfClass(className) then
		return where:FindFirstChildOfClass(className)
	elseif where and not where:FindFirstChildOfClass(className) then
		coroutine.wrap(function()
			task.wait(5)
			if where and not where:FindFirstChildOfClass(className) then
				warn("Infinite yield possible on '"..where.Name..[[:WaitForChildOfClass("]]..className..[[")']])
			end
		end)()
		repeat
			game["Run Service"].Stepped:Wait()
		until where:FindFirstChildOfClass(className) or not where or closed or where:IsDescendantOf(nil)
		if where then
			return where:FindFirstChildOfClass(className)
		else
			warn("Cannot do the operation '".."nil"..[[:WaitForChildOfClass("]]..className..[[")'
The instance is not exist.]])
			return nil
		end
	end
end
local WaitForChildWhichIsA = WaitForChildOfClass
local rs = function(times)
	local times = times or 1
	if times == 0 or times <= 0 then
		times = 1
	end
	times = math.round(times)
	for i=1,times do
		game["Run Service"].Stepped:Wait()
	end
end
local textBar = game:GetService("CoreGui").ExperienceChat.appLayout.chatInputBar.Background.Container.TextContainer.TextBoxContainer.TextBox
function sendMessage(text)
	text = text or "lol"
	if text == "" then
		text = "lol"
	end
	local txt = textBar.Text
	local focused = textBar:IsFocused()
	game["Run Service"].Stepped:Wait()
	textBar.Text = text
	textBar:CaptureFocus()
	game["Run Service"].Stepped:Wait()
	textBar:ReleaseFocus(true)
	textBar.Text = txt
	if focused then
		textBar:CaptureFocus()
	end
	game["Run Service"].Stepped:Wait()
end
local distanceMult = 0
local function randomString(amoutOfSymbols)
	local symbols = string.split([[qSEPwSEPeSEPrSEPtSEPySEPuSEPiSEPoSEPpSEPaSEPsSEPdSEPfSEPgSEPhSEPjSEPkSEPlSEPzSEPxSEPcSEPvSEPbSEPnSEPmSEP1SEP2SEP3SEP4SEP5SEP6SEP7SEP8SEP9SEP0SEP-SEP=SEP`SEP\SEP/SEP.SEP,SEP+SEP_SEP*SEP;SEP:SEP'SEP"SEP]SEP[SEP SEP|SEP!SEP@SEP#SEP$SEP%SEP^SEP&SEP&SEP(SEP)SEP?SEP 
SEP	SEPðŸ˜ŽSEPFire~Doors OPSEPðŸ˜ˆSEPðŸ’€SEPSepSEPSÐ•Ð SEPSeparatorSEPXDSEPLOLSEPYou can add your own memestrings XDSEPThank you for using firedoors!SEPOOFSEPLove you!]],"SEP")
	local context = ""
	amoutOfSymbols = amoutOfSymbols or math.random(1, 250)
	if amoutOfSymbols == 0 or amoutOfSymbols <= 0 then
		amoutOfSymbols = math.random(1,250)
	end
	for i=1,amoutOfSymbols do
		local uorl = false
		if math.random(1,2) == 1 then
			uorl = true
		end
		local addSymbol = symbols[math.random(1,#symbols)]
		if uorl then
			addSymbol = string.upper(addSymbol)
		else
			addSymbol = string.lower(addSymbol)
		end
		context = context..addSymbol
	end
	return context
end
event.Name = randomString()
local function esp(target,color,text,boolName)
	local color = color or Color3.fromRGB(255,255,255)
	if target then
		text = text or target.Name
	end
	local boolName = boolName or "nill"
	if bools[boolName] == nil then
		boolName = "nill"
	end
	local function esp(target)
		local espDetected = false
		local fldr = nil
		if target and target.Parent  then
			for i,v in pairs(target:GetChildren()) do
				if v and v.Parent and v:IsA("Folder") and string.match(string.lower(v:GetFullName()),"esp") then
					espDetected = true
					fldr = v
				end
			end
		end
		if target and target.Parent and not espDetected then
			local folder = Instance.new("Folder",target)
			folder.Name = "esp"..randomString()
			local esp = Instance.new("Highlight",folder)
			esp.OutlineColor = color
			esp.FillColor = color
			esp.Adornee = target
			esp.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
			esp.OutlineTransparency = 0.75
			esp.OutlineTransparency = 0
			local bg = Instance.new("BillboardGui",folder)
			bg.Size = UDim2.fromOffset(100,100)
			bg.Brightness = 1
			bg.AlwaysOnTop = true
			bg.MaxDistance = 1000
			bg.Adornee = target
			local frame = Instance.new("Frame",bg)
			frame.BackgroundColor3 = color
			frame.AnchorPoint = Vector2.new(0.5,0.5)
			frame.Position = UDim2.fromScale(0.5,0.5)
			frame.Size = UDim2.fromScale(0.1,0.1)
			local gradient = Instance.new("UIGradient",frame)
			gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Color3.fromRGB(255,255,255)),ColorSequenceKeypoint.new(1,Color3.fromRGB(75,75,75))}
			gradient.Rotation = 90
			local txt = Instance.new("TextLabel",bg)
			txt.Text = text
			txt.BackgroundTransparency = 1
			txt.Size = UDim2.fromScale(1,0.2)
			txt.AnchorPoint = Vector2.new(0.5,0.5)
			txt.Position = UDim2.fromScale(0.5,0.65)
			txt.Font = Font
			txt.TextScaled = true
			txt.TextColor3 = color
			local stroke = Instance.new("UIStroke",txt)
			stroke.Thickness = 3
			stroke.Color = Color3.fromRGB(0,0,0)
			local stroke = Instance.new("UIStroke",frame)
			stroke.Thickness = 3
			stroke.Color = Color3.fromRGB(0,0,0)
			local corner = Instance.new("UICorner",frame)
			corner.CornerRadius = UDim.new(1,0)
			for i,v in pairs(folder:GetDescendants()) do
				if v then
					v.Name = randomString()
				end
			end
			coroutine.wrap(function()
				repeat
					if target and target.Parent then
						if bools[boolName] == true then
							esp.Enabled = bools[boolName]
							bg.Enabled = esp.Enabled
						else
							esp.Enabled = false
							bg.Enabled = esp.Enabled
						end
					end
					rs(1)
				until not target or closed or not target:IsDescendantOf(workspace)
				if target and target.Parent then
					if bools[boolName] == true then
						esp.Enabled = bools[boolName]
						bg.Enabled = esp.Enabled
					else
						esp.Enabled = false
						bg.Enabled = esp.Enabled
					end
				end
			end)()
			return esp,frame,txt
		elseif target and target.Parent and espDetected and fldr then
			local esp =  fldr:FindFirstChildOfClass("Highlight")
			local bg = fldr:FindFirstChildOfClass("BillboardGui")
			local frame = fldr:FindFirstChildOfClass("BillboardGui"):FindFirstChildOfClass("Frame")
			local txt = fldr:FindFirstChildOfClass("BillboardGui"):FindFirstChildOfClass("TextLabel")
			coroutine.wrap(function()
				repeat
					if target and target.Parent then
						if bools[boolName] == true then
							esp.Enabled = bools[boolName]
							bg.Enabled = esp.Enabled
						else
							esp.Enabled = false
							bg.Enabled = esp.Enabled
						end
					end
					rs(1)
				until not target or closed or not target:IsDescendantOf(workspace)
				rs(1)
				if target and target.Parent then
					if bools[boolName] == true then
						esp.Enabled = bools[boolName]
						bg.Enabled = esp.Enabled
					else
						esp.Enabled = false
						bg.Enabled = esp.Enabled
					end
				end
			end)()
			return esp,frame,txt
		end
	end
	if not target:IsA("Instance") then return end
	return esp(target)
end
function display(target,color,text,boolName)
	local color = Color3.fromRGB(255,255,255)
	if target then
		text = text or target.Name
	end
	local boolName = boolName or "nill"
	if bools[boolName] == nil then
		boolName = "nill"
	end
	local function esp(target)
		local espDetected = false
		local fldr = nil
		if target and target.Parent  then
			for i,v in pairs(target:GetChildren()) do
				if v and v.Parent and v:IsA("Folder") and string.match(string.lower(v:GetFullName()),"display") then
					espDetected = true
					fldr = v
				end
			end
		end
		if target and target.Parent and not espDetected then
			local folder = Instance.new("Folder",target)
			folder.Name = "display"..randomString()
			local bg = Instance.new("BillboardGui",folder)
			bg.Size = UDim2.fromOffset(100,100)
			bg.Brightness = 1
			bg.AlwaysOnTop = true
			bg.MaxDistance = 1000
			bg.Adornee = target
			bg.StudsOffset = Vector3.new(0,10,0)
			local txt = Instance.new("TextLabel",bg)
			txt.Text = text
			txt.BackgroundTransparency = 1
			txt.Size = UDim2.fromScale(1,0.5)
			txt.AnchorPoint = Vector2.new(0.5,0.5)
			txt.Position = UDim2.fromScale(0.5,0.65)
			txt.Font = Font
			txt.TextScaled = true
			txt.TextColor3 = color
			local stroke = Instance.new("UIStroke",txt)
			stroke.Thickness = 3
			stroke.Color = Color3.fromRGB(0,0,0)
			for i,v in pairs(folder:GetDescendants()) do
				if v then
					v.Name = randomString()
				end
			end
			coroutine.wrap(function()
				repeat
					if target and target.Parent then
						if bools[boolName] == true then
							bg.Enabled = bools[boolName]
						else
							bg.Enabled = false
						end
					end
					rs(1)
				until not target or closed or not target:IsDescendantOf(workspace)
				if target and target.Parent then
					if bools[boolName] == true then
						bg.Enabled = bools[boolName]
					else
						bg.Enabled = false
					end
				end
			end)()
			return txt
		elseif target and target.Parent and espDetected and fldr then
			local bg = fldr:FindFirstChildOfClass("BillboardGui")
			local txt = fldr:FindFirstChildOfClass("BillboardGui"):FindFirstChildOfClass("TextLabel")
			coroutine.wrap(function()
				repeat
					if target and target.Parent then
						if bools[boolName] == true then
							bg.Enabled = bools[boolName]
						else
							bg.Enabled = false
						end
					end
					rs(1)
				until not target or closed or not target:IsDescendantOf(workspace)
				rs(1)
				if target and target.Parent then
					if bools[boolName] == true then
						bg.Enabled = esp.Enabled
					else
						bg.Enabled = false
					end
				end
			end)()
			return txt
		end
	end
	if not target:IsA("Instance") then return end
	return esp(target)
end
local tools = {}
function descendant(d)
	coroutine.wrap(function()
		if d then
			if d:IsA("BasePart") then
				rs(1)
				d.CanQuery = false
				if d.Name == "Shade" then
					d.Anchored = bools.God
				end
			end
			if d:IsA("RemoteEvent") then
				rs(1)
				if d.Name == "ClientOpen" then
					repeat
						if bools.FarDoors then
							d:FireServer()
						end
						rs(10)
					until closed or not d or not d:IsDescendantOf(workspace)
				end
			end
			if d:IsA("ProximityPrompt") and not ppNames[d.Name] then
				rs(1)
				d.MaxActivationDistance = 6*(distanceMult+1)
				if d.Enabled == false and bools.EnableAllInteractables and d.ActionText ~= "Close" and d.ObjectText ~= "Close" then
					d.Enabled = true
				end
				if bools.EnableAllInteractables or bools.AutoInteract then
					d.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
				end
				if d.ActionText == "Close" or d.ObjectText == "Close" then
					d.Enabled = not bools.AutoInteract
				end
			end
			if d:IsA("ProximityPrompt") and ppNames[d.Name] then
				rs(1)
				local can = true
				if workspace.CurrentRooms:FindFirstChild("100") then
					if d:IsDescendantOf(workspace.CurrentRooms["100"].ElectricalDoor) then
						can = false
					end
					if d:IsDescendantOf(workspace.CurrentRooms["100"].IndustrialGate) then
						can = false
					end
					if d:IsDescendantOf(workspace.CurrentRooms["100"]:FindFirstChild("ElevatorBreaker")) then
						can = true
					end
					if d.Parent.Name == "ElevatorBreaker" then
						can = false
					end
				end
				if workspace.CurrentRooms:FindFirstChild("50") then
					if d:IsDescendantOf(workspace.CurrentRooms["50"].Door) then
						can = false
					end
				end
				if workspace.CurrentRooms:FindFirstChild("52") then
					if d:IsDescendantOf(workspace.CurrentRooms["52"]) then
						can = false
					end
				end
				repeat
					if not d or not can then return end
					d.MaxActivationDistance = 6*(distanceMult+1)
					if bools.AutoInteract and getDistance(d.Parent,hrp) and getDistance(d.Parent,hrp) <= d.MaxActivationDistance and d.Enabled and d.ActionText ~= "Close" and d.ObjectText ~= "Close" then
						fireproximityprompt(d,1,true)
					end
					if d.Enabled == false and bools.EnableAllInteractables and d.ActionText ~= "Close" and d.ObjectText ~= "Close" then
						d.Enabled = true
					end
					if bools.EnableAllInteractables or bools.AutoInteract then
						d.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
					end
					if d.ActionText == "Close" or d.ObjectText == "Close" then
						d.Enabled = not bools.AutoInteract
					end
					rs(1)
				until not d or closed or not can or not d:IsDescendantOf(workspace)
			end
			if d:IsA("Model") and not d:IsA("Tool") then
				if d.Name == "LiveBreakerPolePickup" then
					repeat
						if bools.AutoInteract then
							fireproximityprompt(d:WaitForChild("ActivateEventPrompt"),1,true)
						end
						rs(1)
					until closed or not d or not d:IsDescendantOf(workspace) or d:IsDescendantOf(nil)
				end
				if d.Name == "TriggerEventCollision" then
					rs(1)
					coroutine.wrap(function()
						repeat
							if bools.NoSeek then
								if workspace.CurrentRooms:FindFirstChild("100") and d:IsDescendantOf(workspace.CurrentRooms["100"]) then
									return
								elseif workspace.CurrentRooms:FindFirstChild("50") and d:IsDescendantOf(workspace.CurrentRooms["50"]) then
									return
								else
									d:Destroy()
								end
							end
							rs(1)
						until not d or closed or not d:IsDescendantOf(workspace)
					end)()
				end
				if d.Name == "KeyObtain" then
					rs(1)
					esp(d,Color3.fromRGB(0,150,0),"Key","ItemESP")
				end
				if d.Name == "Vitamins" then
					rs(1)
					esp(d,Color3.fromRGB(150,75,0),"Vitamins","ItemESP")
				end
				if d.Name == "GoldPile" then
					rs(1)
					local gold = d:GetAttribute("GoldValue")
					if gold <= 24.9 then
						esp(d,Color3.fromRGB(150,150,0),"Coins ["..tostring(gold).."]","ItemESP")
					elseif gold >= 24.9 and gold <= 99.9 then
						esp(d,Color3.fromRGB(250,250,0),"Gold ["..tostring(gold).."]","ItemESP")
					elseif gold >= 99.9 then
						esp(d,Color3.fromRGB(0,250,250),"Diamonds ["..tostring(gold).."]","ItemESP")
					end
				end
				if d.Name == "Crucifix" then
					rs(1)
					esp(d,Color3.fromRGB(0,150,150),"Crucifix","ItemESP")
				end
				if d.Name == "CrucifixWall" then
					rs(1)
					esp(d,Color3.fromRGB(0,150,150),"Crucifix","ItemESP")
				end
				if d.Name == "Lighter" then
					rs(1)
					esp(d,Color3.fromRGB(150,150,0),"Lighter","ItemESP")
				end
				if d.Name == "Battery" then
					rs(1)
					esp(d,Color3.fromRGB(175,50,0),"Battery","ItemESP")
				end
				if d.Name == "Flashlight" then
					rs(1)
					esp(d,Color3.fromRGB(150,150,150),"Flashlight","ItemESP")
				end
				if d.Name == "Candle" then
					rs(1)
					esp(d,Color3.fromRGB(175,100,0),"Candle","ItemESP")
				end
				if d.Name == "Lockpick" then
					rs(1)
					esp(d,Color3.fromRGB(50,50,50),"Lockpick","ItemESP")
				end
				if d.Name == "SkeletonKey" then
					rs(1)
					esp(d,Color3.fromRGB(50,50,50),"Skele-key","ItemESP")
				end
				if d.Name == "LiveHintBook" then
					rs(1)
					esp(d,Color3.fromRGB(0,150,150),"Hint","ItemESP")
				end
				if d.Name == "LiveBreakerPolePickup" then
					rs(1)
					esp(d,Color3.fromRGB(150,50,0),"Breaker","ItemESP")
				end
				if d.Parent == workspace and string.match(d.Name,"Moving") and WaitForChildOfClass(d,"Part") then
					rs(1)
					event:Fire("Entity",d)
				end
				if d.Name == "FigureRagdoll" and d.Parent ~= workspace then
					rs(1)
					esp(d,Color3.fromRGB(255,0,0),"Figure","EntityESP")
					repeat
						for i,v in pairs(d:GetDescendants()) do
							if v and v:IsA("BasePart") then
								v.CanCollide = false
							end
						end
						rs(60)
					until closed or not d or not d:IsDescendantOf(workspace)
				end
				if d.Name == "Door" and isnumber(d.Parent.Name) then
					rs(1)
					esp(d:WaitForChild("Door"),Color3.fromRGB(170, 109, 35),tostring(tonumber(d.Parent.Name)+1),"DoorESP")
				end
			end
			if d:IsA("Tool") then
				rs(1)
				if d and d:FindFirstChild("Remote") then
					tools[d.Parent.Name.."'s "..d.Name] = d
				end
			end
		end
	end)()
end
function dPlayer(v)
	if v and v:IsA("Tool") and v:FindFirstChild("Remote") and v.Remote:IsA("RemoteEvent") then
		tools[v.Parent.Name.."'s "..v.Name] = v
	end
end
for i,player in pairs(game.Players:GetPlayers()) do
	connectedFunctions[#connectedFunctions+1] = player:WaitForChild("Backpack").ChildAdded:Connect(dPlayer)
	for i,v in pairs(player.Backpack:GetChildren()) do
		dPlayer(v)
	end
end
connectedFunctions[#connectedFunctions+1] = game.Players.PlayerAdded:Connect(function(player)
	connectedFunctions[#connectedFunctions+1] = player:WaitForChild("Backpack").ChildAdded:Connect(dPlayer)
end)
function isnumber(txt)
	if tonumber(txt) ~= nil or txt == "inf" then
		return true
	else
		return false
	end
end
local inGodMode = false
function getDistance(I1,I2)
	if I1 and I2 then
		local function get(I)
			if I:IsA("BasePart") then
				return I.Position
			end
			if I:IsA("Model") then
				return I.WorldPivot.Position
			end
			if I:IsA("Attachment") then
				return I.WorldPosition
			end
			return nil
		end
		if get(I1) and get(I2) then
			return (get(I1)-get(I2)).Magnitude
		end
	end
end
connectedFunctions[#connectedFunctions+1] = game.Players.PlayerAdded:Connect(function(player)
	if player.Character then
		rs(1)
		esp(player.Character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),player.Name,"PlayerESP")
		local text = display(player.Character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),"","ShowBackpacks")
		coroutine.wrap(function()
			repeat
				local Text = "["
				for i,v in pairs(player.Backpack:GetChildren()) do
					if v and v:IsA("Tool") then
						Text = Text.." "..v.Name
					end
				end
				if player.Character and player.Character:FindFirstChildOfClass("Tool") then
					Text = Text.." "..player.Character:FindFirstChildOfClass("Tool").Name.." ]"
				else
					Text = Text.." ]"
				end
				text.Text = Text
				rs(1)
			until not text or closed
		end)()
	end
	connectedFunctions[#connectedFunctions+1] = player.CharacterAdded:Connect(function(character)
		rs(1)
		esp(character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),player.Name,"PlayerESP")
		local text = display(player.Character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),"","ShowBackpacks")
		coroutine.wrap(function()
			repeat
				local Text = "["
				for i,v in pairs(player.Backpack:GetChildren()) do
					if v and v:IsA("Tool") then
						Text = Text.." "..v.Name
					end
				end
				if player.Character and player.Character:FindFirstChildOfClass("Tool") then
					Text = Text.." "..player.Character:FindFirstChildOfClass("Tool").Name.." ]"
				else
					Text = Text.." ]"
				end
				text.Text = Text
				rs(1)
			until not text or closed
		end)()
	end)
end)
for i,player in pairs(game.Players:GetPlayers()) do
	coroutine.wrap(function()
		if player.Character and plr ~= player then
			rs(1)
			esp(player.Character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),player.Name,"PlayerESP")
			local text = display(player.Character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),"","ShowBackpacks")
			coroutine.wrap(function()
				repeat
					local Text = "["
					for i,v in pairs(player.Backpack:GetChildren()) do
						if v and v:IsA("Tool") then
							Text = Text.." "..v.Name
						end
					end
					if player.Character and player.Character:FindFirstChildOfClass("Tool") then
						Text = Text.." "..player.Character:FindFirstChildOfClass("Tool").Name.." ]"
					else
						Text = Text.." ]"
					end
					text.Text = Text
					rs(1)
				until not text or closed
			end)()
		end
		connectedFunctions[#connectedFunctions+1] = player.CharacterAdded:Connect(function(character)
			if player ~= plr then
				rs(1)
				esp(character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),player.Name,"PlayerESP")
				local text = display(player.Character,player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Head").Color or Color3.fromRGB(255,255,150),"","ShowBackpacks")
				coroutine.wrap(function()
					repeat
						local Text = "["
						for i,v in pairs(player.Backpack:GetChildren()) do
							if v and v:IsA("Tool") then
								Text = Text.." "..v.Name
							end
						end
						if player.Character and player.Character:FindFirstChildOfClass("Tool") then
							Text = Text.." "..player.Character:FindFirstChildOfClass("Tool").Name.." ]"
						else
							Text = Text.." ]"
						end
						text.Text = Text
						rs(1)
					until not text or closed
				end)()
			end
		end)
	end)()
end
local loaded = _G.loaded123FireDoors
if not loaded then
	local load = randomString()
	_G.loaded123FireDoors = load
	loaded = load
else
	screenGui:Destroy()
	return error(fullName..":"..[[ 
The script is loaded!]],2)
end
local canJump = true
connectedFunctions[#connectedFunctions+1] = game.UserInputService.JumpRequest:Connect(function()
	if hum.FloorMaterial ~= nil and hum.FloorMaterial ~= Enum.Material.Air and bools.EnableJumping and canJump then
		canJump = false
		hum.JumpPower = 25
		hum:ChangeState(Enum.HumanoidStateType.Jumping)
		wait(0.2)
		canJump = true
	end
end)
close.MouseButton1Click:Connect(function()
	if closed then return end
	closed = true
	if inGodMode then
		char.Collision.Position = char.Collision.Position + Vector3.new(0,10,0)
	end
	for i,v in pairs(bools) do
		if i and v then
			bools[i] = false
		end
	end
	for i,v in pairs(ppNames) do
		if i and v then
			ppNames[i] = false
		end
	end
	for i,v in pairs(connectedFunctions) do
		if i and v then
			connectedFunctions[i]:Disconnect()
		end
	end
	wait(0)
	hum:SetAttribute("SpeedBoost",0)
end)
if not whitelist[string.lower(plr.Name)] then
	pagelist.Notify([[BRUH,
Go get whitelisted!]],15)
	mainFrame:Destroy()
	_G.loaded123FireDoors = false
	task.wait(15)
	screenGui:Destroy()
	return
elseif whitelist[string.lower(plr.Name)] == "blacklisted" then
	pagelist.Notify([[LOL,
You are blacklisted!]],15)
	mainFrame:Destroy()
	_G.loaded123FireDoors = false
	task.wait(15)
	screenGui:Destroy()
	return
end
local page = pageList.CreatePage("Main")
page.CreateLabel("Exclusive hub for "..fullName)
page.CreateLabel("Hub was made in 1.5 days")
page.CreateLabel("Whole script was made in [Still in developement]")
page.CreateLabel(fullName.." was made by GodWorldX - Infernus#0863")
page.CreateTextBox("Custom logo [IMAGE ID]",
	function(id)
		logo.Image = id
	end
)
page.CreateTextBox("Custom name",
	function(id)
		title.Text = id
	end
)
page.CreateTextBox([[Make notification: [Prefix: ";"] [Text,time] ]],
	function(id)
		local split = string.split(id,";")
		if not isnumber(split[2]) or #split ~= 2 then
			return
		end
		pagelist.Notify(split[1],tonumber(split[2]))
	end
)
hum.Died:Connect(function()
	if bools.FlingOnDeath then
		rs(1)
		for i,v in pairs(workspace:GetDescendants()) do
			if v and v:IsA("BasePart") then
				v.CanCollide = true
			end
		end
		for _, child in pairs(plr.Character:GetDescendants()) do
			if child:IsA("BasePart") then
				child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
			end
		end
		wait(.1)
		local bambam = Instance.new("BodyAngularVelocity")
		bambam.Name = randomString()
		bambam.Parent = hrp
		bambam.AngularVelocity = Vector3.new(0,99999,0)
		bambam.MaxTorque = Vector3.new(0,math.huge,0)
		bambam.P = math.huge
		local Char = plr.Character:GetChildren()
		for i, v in next, Char do
			if v:IsA("BasePart") then
				v.CanCollide = false
				v.Massless = true
				v.Velocity = Vector3.new(0, 0, 0)
			end
		end
		repeat
			bambam.AngularVelocity = Vector3.new(0,99999,0)
			wait(.2)
			bambam.AngularVelocity = Vector3.new(0,0,0)
			wait(.1)
		until not bambam or not bambam:IsDescendantOf(char) or not bambam:IsDescendantOf(workspace)
	end
end)
local page = pagelist.CreatePage("Character")
page.CreateSwitch("Noclip",
	function(val)
		bools.Noclipping = val
		if bools.Noclipping then
			repeat
				for _, child in pairs(char:GetDescendants()) do
					if child:IsA("BasePart") and child.CanCollide == true then
						child.CanCollide = false
					end
				end
				rs(1)
			until not bools.Noclipping or closed
			local col = char:FindFirstChild("Collision") or hrp
			col.CanCollide = true
		end
	end
)
local bypassedAC = _G.BAC123FireDoors
local extraSpeed = 0
connectedFunctions[#connectedFunctions+1] = game["Run Service"].Stepped:Connect(function()
	hum:SetAttribute("SpeedBoost",extraSpeed)
end)
local ex1 = page.CreateSlider("Extra Speed",0,6,1,
	function(val)
		extraSpeed = val
	end
)
local ex2 = page.CreateSlider("Extra Speed",0,100,6,
	function(val)
		extraSpeed = val
	end
)
page.CreateSwitch("Enable jumping",
	function(bool)
		bools.EnableJumping = bool
	end
)
page.CreateSwitch("Fling on death",
	function(bool)
		bools.FlingOnDeath = bool
	end
)
local moving = false
page.CreateButton("Back to map",
	function()
		if moving then return end
		moving = true
		local best = 0
		for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
			if v and isnumber(v.Name) and tonumber(v.Name) >= best then
				best = tonumber(v.Name)
			end
		end
		local room = workspace.CurrentRooms:FindFirstChild(tostring(best-2))
		local timee = ((room.Door.Door.Position-hrp.Position).Magnitude)/hum.WalkSpeed
		hrp.Anchored = true
		game.TweenService.Create(hrp,TweenInfo.new(timee,Enum.EasingStyle.Linear),{CFrame = room.Door.Door.CFrame}):Play()
		task.wait(timee)
		hrp.Anchored = false
		moving = false
	end
)
page.CreateSwitch("God mode",
	function(bool)
		bools.God = bool
		inGodMode = bool
		if bool then
			char.Collision.Position = char.Collision.Position - Vector3.new(0,10,0)
		else
			char.Collision.Position = char.Collision.Position + Vector3.new(0,10,0)
		end
	end
)
page.CreateSwitch("Player untouchable",
	function(bool)
		bools.PlayerUntouchable = bool
		for i,v in pairs(workspace:GetDescendants()) do
			if v and v:IsA("BasePart") then
				v.CanTouch = not bools.PlayerUntouchable
			end
		end
	end
)
connectedFunctions[#connectedFunctions+1] = workspace.DescendantAdded:Connect(function(v)
	if v and v:IsA("BasePart") then
		v.CanTouch = not bools.PlayerUntouchable
	end
end)
ex2.Visible = false
local page = pagelist.CreatePage("Interactables")
page.CreateSwitch("Auto interact",
	function(bool)
		bools.AutoInteract = bool
	end
)
page.CreateSlider([[Activation distance
multiplier]],0,1,0.1,
	function(num)
		distanceMult = num
	end
)
page.CreateSwitch("Enable every interactable",
	function(bool)
		bools.EnableAllInteractables = bool
	end
)
page.CreateSwitch("Instant interact",
	function(bool)
		bools.InstantInteract = bool
	end
)
page.CreateSwitch("Auto library code",
	function(bool)
		bools.AutoLibraryCode = bool
	end
)
page.CreateSwitch("Far open doors",
	function(bool)
		bools.FarDoors = bool
	end
)
page.CreateSwitch("Auto complete elevator minigame",
	function(bool)
		bools.AutoFixElevator = bool
	end
)
connectedFunctions[#connectedFunctions+1] = game.ProximityPromptService.PromptButtonHoldBegan:Connect(function(pp)
	if bools.InstantInteract then
		pp:InputHoldEnd()
		fireproximityprompt(pp,1,true)
	end
end)
local page = pagelist.CreatePage("ESP")
page.CreateSwitch("Door ESP",
	function(bool)
		bools.DoorESP = bool
	end
)
page.CreateSwitch("Entity ESP",
	function(bool)
		bools.EntityESP = bool
	end
)
page.CreateSwitch("Player ESP",
	function(bool)
		bools.PlayerESP = bool
	end
)
page.CreateSwitch("Display player backpack",
	function(bool)
		bools.ShowBackpacks = bool
	end
)
page.CreateSwitch("Item ESP",
	function(bool)
		bools.ItemESP = bool
	end
)
local page = pagelist.CreatePage("Notifications")
page.CreateSwitch("Notify entities",
	function(bool)
		bools.NotifyEntities = bool
	end
)
local spawnedMessage = "{mob} has spawned!"
page.CreateSwitch("Notify enteties for others",
	function(bool)
		bools.NotifyEntetiesForOthers = bool
	end
)
local esm = page.CreateTextBox("Entity spawned message",
	function(text)
		spawnedMessage = text
		pagelist.Notify(text,5)
	end
)
page.CreateSwitch("Notify when player enters/leaves",
	function(bool)
		bools.NotifyWhenPlayerEntersOrLeaves = bool
	end
)
game.Players.PlayerAdded:Connect(function(plr)
	if bools.NotifyWhenPlayerEntersOrLeaves then
		if plr.DisplayName ~= "" or plr.DisplayName ~= nil then
			pagelist.Notify(plr.Name.." ("..plr.DisplayName..") has entered the game!",10)
		else
			pagelist.Notify(plr.Name.." has entered the game!",10)
		end
	end
end)
game.Players.PlayerRemoving:Connect(function(plr)
	if bools.NotifyWhenPlayerEntersOrLeaves then
		if plr.DisplayName ~= "" or plr.DisplayName ~= nil then
			pagelist.Notify(plr.Name.." ("..plr.DisplayName..") has leaved the game!",10)
		else
			pagelist.Notify(plr.Name.." has leaved the game!",10)
		end
	end
end)
local page = pagelist.CreatePage("Enteties")
page.CreateSwitch("No seek",
	function(bool)
		bools.NoSeek = bool
	end
)
local novoid = page.CreateSwitch("No void",
	function(bool)
		if game:GetService("ReplicatedStorage").ClientModules.EntityModules:FindFirstChild("Void") and bool then
			game:GetService("ReplicatedStorage").ClientModules.EntityModules.Void.Name = "Not Void"
		elseif game:GetService("ReplicatedStorage").ClientModules.EntityModules:FindFirstChild("Not Void") and not bool then
			game:GetService("ReplicatedStorage").ClientModules.EntityModules["Not Void"].Name = "Void"
		end
	end
)
local fakeScreech = Instance.new("Model",workspace.CurrentCamera)
fakeScreech.Name = "Not Screech"
page.CreateSwitch("No screech",
	function(bool)
		local name = "Not Screech"
		if bool then
			if game.ReplicatedStorage.Bricks:FindFirstChild("Screech") and game.ReplicatedStorage.EntityInfo:FindFirstChild("Screech") then
				game.ReplicatedStorage.Bricks.Screech.Name = name
				game.ReplicatedStorage.EntityInfo.Screech.Name = name
				fakeScreech.Name = "Screech"
			end
		else
			if game.ReplicatedStorage.Bricks:FindFirstChild(name) and game.ReplicatedStorage.EntityInfo:FindFirstChild(name) then
				game.ReplicatedStorage.Bricks[name].Name = "Screech"
				game.ReplicatedStorage.EntityInfo[name].Name = "Screech"
				fakeScreech.Name = name
			end
		end
	end
)
connectedFunctions[#connectedFunctions+1] = event.Event:Connect(function(state,value)
	if state == "Entity" and value then
		if value then
			WaitForChildOfClass(value,"Part").Changed:Wait()
		end
		if value then
			WaitForChildOfClass(value,"Part").Changed:Wait()
		end
		if value then
			esp(value,Color3.fromRGB(150,0,0),string.split(value.Name,"Moving")[1],"EntityESP")
			if bools.NotifyEntities then
				pagelist.Notify(string.split(value.Name,"Moving")[1]..[[!]],10)
			end
			if bools.NotifyEntetiesForOthers then
				local message = string.split(spawnedMessage,"{mob}")
				local output = ""
				output = message[1]
				for i,v in pairs(message) do
					if i ~= 1 then
						output = output..string.split(value.Name,"Moving")[1]..v
					end
				end
				sendMessage(output)
			end
		end
	end
end)
esm.Text = spawnedMessage
pagelist.Notify("Welcome to "..actualName..[[!
Thank you for using our tool!
Hope, you will enjoy it :)
(Sorry for a bad visual,
it self-made hub!)]],15)
local page = pagelist.CreatePage("Lighting")
connectedFunctions[#connectedFunctions] = workspace.DescendantAdded:Connect(descendant)
page.CreateSwitch("Full bright",
	function(bool)
		bools.FullBright = bool
		game.Lighting.Brightness = 1
		game.Lighting.Ambient = Color3.fromRGB(255,255,255)
		game.Lighting.GlobalShadows = false
	end
)
connectedFunctions[#connectedFunctions+1] = game.Lighting.Changed:Connect(function()
	if bools.FullBright then
		game.Lighting.Brightness = 1
		game.Lighting.Ambient = Color3.fromRGB(255,255,255)
		game.Lighting.GlobalShadows = false
	end
end)
local page = pagelist.CreatePage("Anticheat")
page.CreateLabel("In previos page we have god-mode function. It also bypassing anti-noclip")
page.CreateButton("Bypass anticheat",
	function()
		if not bypassedAC then
			game:GetService("Players").LocalPlayer.PlayerGui.MainUI.ItemShop.Visible = false
			require(game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game).freemouse = false
			novoid.Visible = false
			if game:GetService("ReplicatedStorage").ClientModules.EntityModules:FindFirstChild("Void") then
				game:GetService("ReplicatedStorage").ClientModules.EntityModules.Void.Name = "Not Void"
			end
			_G.BAC123FireDoors = true
			bypassedAC = _G.BAC123FireDoors
			ex1.Visible = false
			ex2.Visible = true
		end
	end
)
page.CreateLabel("!Bypass anticheat works only in starting elevator at item shop menu!")
local page = pagelist.CreatePage("Trolling")
local activateToolsBool = false
function activateTools()
	coroutine.wrap(function()
		rs(1)
		if activateToolsBool then return end
		activateToolsBool = true
		rs(1)
		for i,v in pairs(tools) do
			if v and v:FindFirstChild("Remote") and v.Remote:IsA("RemoteEvent") and v.Parent ~= char and v.Parent ~= plr.Backpack then
				v.Remote:FireServer()
			end
		end
		rs(1)
		activateToolsBool = false
	end)()
	rs(3)
end
page.CreateButton("Activate other's tools",
	function()
		pagelist.Notify("Activated!")
		activateTools()
	end
)
page.CreateSwitch("Spam other's tools",
	function(bool)
		bools.SpamOthersTools = bool
		if bool then
			pagelist.Notify("Spamming!")
		end
	end
)
--TODO:/ÐŸÑ‘Ñ€Ð½ÑƒÑ‚ÑŒ_Ð¸_ÑƒÐ´Ð°Ð»Ð¸Ñ‚ÑŒ_Ð¼Ð¾Ð»Ð½Ð¸ÑŽ
local repeatTime = "5"
coroutine.wrap(function()
	repeat
		if bools.SpamOthersTools == true then
			activateTools()
		else
			task.wait(tonumber(repeatTime))
		end
		task.wait(tonumber(repeatTime))
	until closed
end)()
coroutine.wrap(function()
	repeat
		local hints = game.Players.LocalPlayer.PlayerGui.PermUI.Hints
		if bools.AutoLibraryCode then
			local paper = game.Players.LocalPlayer.Backpack:FindFirstChild("LibraryHintPaper") or game.Players.LocalPlayer.Character:FindFirstChild("LibraryHintPaper")
			if paper then
				local paper = paper.UI
				local code = ""
				local numbers = 0
				for i,v in pairs(paper:GetChildren()) do
					if v and v:IsA("ImageLabel") and isnumber(v.Name) then
						numbers = tonumber(v.Name)
					end
				end
				for i=1, numbers do
					local v = paper[tostring(i)]
					for i,va in pairs(hints:GetChildren()) do
						if va and va:IsA(v.ClassName) and va.ImageRectOffset == v.ImageRectOffset then
							code = code..va.TextLabel.Text
						end
					end
				end
				game:GetService("ReplicatedStorage"):WaitForChild("EntityInfo"):WaitForChild("PL"):FireServer(code)
				rs(15)
			end
		end
		rs(1)
	until closed
end)()
local flexSpeedAAA = "0"
coroutine.wrap(function()
	repeat
		for i,v in pairs(game.Players.LocalPlayer.PlayerGui.MainUI.LobbyFrame.Achievements.List:GetChildren()) do
			if v and v:IsA("ImageButton") and bools.FlexAchievements then
				game.ReplicatedStorage.EntityInfo.FlexAchievement:FireServer(v.Name)
				task.wait(tonumber(flexSpeedAAA))
			end
		end
		rs(1)
	until closed
end)()
local fixed = false
coroutine.wrap(function()
	repeat
		if bools.SpamWalkSound then
			game:GetService("ReplicatedStorage"):WaitForChild("EntityInfo"):WaitForChild("Footstep"):FireServer()
		end
		if bools.AutoFixElevator then
			game.ReplicatedStorage.EntityInfo.EBF:FireServer()
			game.ReplicatedStorage.Bricks.EBF:FireServer()
		end
		if bools.AutoFixElevator then
			coroutine.wrap(function()
				if workspace.CurrentRooms:FindFirstChild("100") and workspace.CurrentRooms["100"]:FindFirstChild("ElevatorCar") and workspace.CurrentRooms["100"].ElevatorCar:FindFirstChild("ActualCollision") and workspace.CurrentRooms["100"].ElevatorCar.ActualCollision:FindFirstChild("ElevatorPanel") and workspace.CurrentRooms["100"].ElevatorCar.ActualCollision.ElevatorPanel:FindFirstChild("ElevatorLight") and not fixed then
					fixed = true
					local target = workspace.CurrentRooms["100"].ElevatorCar.ActualCollision.ElevatorPanel:FindFirstChild("ElevatorLight")
					repeat
						rs(1)
					until closed or not target or target.Material == Enum.Material.Neon
					if not closed and target and target.Material == Enum.Material.Neon then
						pagelist.Notify([[Elevator has been repaired!
Please, disable god-mode (if it is enabled), and go to elevator!]])
					end
				end
			end)()
		end
		rs(1)
	until closed
end)()
textLabel = page.CreateTextBox("Spam speed (in seconds)",
	function(text)
		if not isnumber(text) or isnumber(text) and tonumber(text) <= -0.01 then
			textLabel.Text = prevText
			pagelist.Notify("Must be a valid number!",5)
		elseif isnumber(text) and tonumber(text) <= 60.01 then
			repeatTime = text
			prevText = text
		elseif isnumber(text) and tonumber(text) >= 60 then
			textLabel.Text = prevText
			pagelist.Notify("The delay must be less than 60!",5)
		end
	end
)
page.CreateSwitch("Flex achievements",
	function(bool)
		bools.FlexAchievements = bool
	end
)
PREVText = "0"
flexSpeed = page.CreateTextBox("Achievement flex speed",
	function(text)
		if not isnumber(text) or isnumber(text) and tonumber(text) <= -0.01 then
			flexSpeed.Text = PREVText
			pagelist.Notify("Must be a valid number!",5)
		elseif isnumber(text) and tonumber(text) <= 10.01 then
			flexSpeedAAA = text
			PREVText = text
		elseif isnumber(text) and tonumber(text) >= 10 then
			flexSpeed.Text = PREVText
			pagelist.Notify("The delay must be less than 10!",5)
		end
	end
)
flexSpeed.Text = PREVText
page.CreateSwitch("Spam walk sound",
	function(bool)
		bools.SpamWalkSound = bool
	end
)
textLabel.Text = repeatTime
prevText = textLabel.Text
local page = pagelist.CreatePage("Other")
page.CreateButton("Reset",
	function()
		hum.Health = -1
	end
)
page.CreateButton("Play again",
	function()
		game.ReplicatedStorage.EntityInfo.PlayAgain:FireServer()
	end
)
page.CreateButton("Lobby",
	function()
		game.ReplicatedStorage.EntityInfo.Lobby:FireServer()
	end
)
page.CreateSwitch("Fix mystery lag",
	function(bool)
		game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.PromptService.Disabled = bool
		game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Updated.Disabled = bool
		if game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Module_Events") then
			game:GetService("ReplicatedStorage").ClientModules.Module_Events.Name = "Not Module_Events"
		else
			game:GetService("ReplicatedStorage").ClientModules["Not Module_Events"].Name = "Module_Events"
		end
	end
)
for i,d in pairs(workspace:GetDescendants()) do
	descendant(d)
end
screenGui.DescendantAdded:Connect(function(d)
	if d then
		d.Name = randomString()
	end
end)
screenGui.Name = randomString()
for i,v in pairs(screenGui:GetDescendants()) do
	if v then
		v.Name = randomString()
	end
end
wait(15)
pagelist.Notify([[Made by:
GodWorldX - Infernus#0863
PlayPozitiv_YOUTUBE - LayKad_#3499
Enjoy :D]],15)
